// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js" 
//   output   = "../src/generated/prisma" //will be required in future release anyway
//   binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"] //read https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options

// }


generator client {
  provider = "prisma-client"  //read https://www.prisma.io/docs/orm/prisma-schema/overview/generators#prisma-client-early-access
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"] //read https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options
  //native - the default, when not(hing) specified
  //darwin-arm64 - for Apple Silicon (M1) Macs
  //linux-musl-arm64-openssl-3.0.x - for Alpine Linux (on MacOS)
  //linux-musl-openssl-3.0.x - for Alpine Linux (on AMD64)
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// #region Configuration
model App {
    id String @id @default(uuid(7))
    version String
    is_db_initialized Boolean @default(false)
    settings Json
}
// #endregion

// #region Authentication & Authorization - NextAuth (Auth.js) 
model User {
  id            String          @id @default(uuid(7))
  name          String?
  username      String?         @unique // take their discord username instead?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //custom relations 
  settings Settings?
  posts Post[]
}
 
model Account {
  id                       String  @id @default(uuid(7))
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(uuid(7))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


// #endregion

// #region User
model Settings {
    // id String @id @default(uuid(7))
    userId String @id @unique
    settings Json
    //relations
    user User @relation(fields: [userId], references: [id])
}

model Post {
  id        String     @id @default(uuid(7))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String
  author    User @relation(fields: [authorId], references: [id])
}
// #endregion

// #region Helldivers Data
model h1_status {
  id   String @id @default(uuid(7))
//   date  DateTime // The day the status was updated - mostly used for human debugging
  season Int @unique
  time   Int @unique
  campaign_status Json
  defend_event    Json
  attack_events   Json
  statistics      Json
}
// #endregion